{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mwdfworkflow"
		},
		"mwfblobstorageconnectivity_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mwfblobstorageconnectivity'"
		},
		"mwfdatabricksconnectivity_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'mwfdatabricksconnectivity'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/mwfblobstorageconnectivity')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('mwfblobstorageconnectivity_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mwfdatabricksconnectivity')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://centralus.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('mwfdatabricksconnectivity_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "6.4.x-scala2.11"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/modifiers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mwfblobstorageconnectivity",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "30181_modifier_uaub (transformed).csv",
						"container": "intermittentoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Modifier",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mwfblobstorageconnectivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rates_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mwfblobstorageconnectivity",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rates_input.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Proc Type",
						"type": "String"
					},
					{
						"name": "Proc Code",
						"type": "String"
					},
					{
						"name": "Procedure Description",
						"type": "String"
					},
					{
						"name": "Unit Value",
						"type": "String"
					},
					{
						"name": "Basic Rate",
						"type": "String"
					},
					{
						"name": "Child Rate",
						"type": "String"
					},
					{
						"name": "ER Rate",
						"type": "String"
					},
					{
						"name": "Conv Ind",
						"type": "String"
					},
					{
						"name": "ER Ind",
						"type": "String"
					},
					{
						"name": "Cutback Ind",
						"type": "String"
					},
					{
						"name": "Prof %",
						"type": "String"
					},
					{
						"name": "Rental Rate",
						"type": "String"
					},
					{
						"name": "Non-Physn Med Prac Ind",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mwfblobstorageconnectivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rates_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mwfblobstorageconnectivity",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mwfblobstorageconnectivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "rates_input",
								"type": "DatasetReference"
							},
							"name": "ratesinput"
						},
						{
							"dataset": {
								"referenceName": "modifiers",
								"type": "DatasetReference"
							},
							"name": "modifieruaubinput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rates_output",
								"type": "DatasetReference"
							},
							"name": "ratesoutput1"
						}
					],
					"transformations": [
						{
							"name": "branchusingproctype"
						},
						{
							"name": "branchusingcutbackind"
						},
						{
							"name": "interesteddcolumns"
						},
						{
							"name": "increaseratesby23"
						},
						{
							"name": "increaseratesby43"
						},
						{
							"name": "mergeratesdata"
						},
						{
							"name": "aggregatebyproccode"
						},
						{
							"name": "joinratesdata"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "discardredundantcolumns"
						},
						{
							"name": "removecount"
						},
						{
							"name": "emergencyroomservices"
						},
						{
							"name": "updateerservicedescription"
						},
						{
							"name": "feescheduleservices"
						},
						{
							"name": "updatefsservicedescription"
						},
						{
							"name": "drugservices"
						},
						{
							"name": "updatedrugservicedescription"
						},
						{
							"name": "mergecomputedrates"
						},
						{
							"name": "updatemodifiervalues"
						},
						{
							"name": "ChooseCols"
						},
						{
							"name": "mergeratesandmodifiers"
						},
						{
							"name": "addCodeType"
						},
						{
							"name": "picdataformat"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "filterbyprocpercentage"
						},
						{
							"name": "fsservicedesccomputemodtcamount"
						},
						{
							"name": "mergemodifiedtcamount"
						},
						{
							"name": "addallcolsvalues"
						},
						{
							"name": "allcolscount"
						},
						{
							"name": "removeduprows"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\t{Proc Type} as string,\n\t\t{Proc Code} as string,\n\t\t{Procedure Description} as string,\n\t\t{Unit Value} as double '$#########.###',\n\t\t{Basic Rate} as double '$#########.###',\n\t\t{Child Rate} as double '$#########.###',\n\t\t{ER Rate} as double '$#########.###',\n\t\t{Conv Ind} as short '000',\n\t\t{ER Ind} as integer '000',\n\t\t{Cutback Ind} as integer '000',\n\t\t{Prof %} as double '000,000,000.000',\n\t\t{Rental Rate} as double '000,000,000.000',\n\t\t{Non-Physn Med Prac Ind} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ratesinput\nsource(output(\n\t\tCode as string,\n\t\tModifier as string,\n\t\tAmount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> modifieruaubinput\ninteresteddcolumns split(rlike({Proc Type}, '[1IKLMN]'),\n\tdisjoint: true) ~> branchusingproctype@(filterbyproctype)\nbranchusingproctype@filterbyproctype split({Cutback Ind}==1,\n\t{Cutback Ind}==0,\n\tdisjoint: true) ~> branchusingcutbackind@(iscutbackind, isnotcutbackind)\nratesinput select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> interesteddcolumns\nbranchusingcutbackind@iscutbackind derive({Basic Rate} = round(({Basic Rate}*1.2344),2),\n\t\t{Child Rate} = round(({Child Rate}*1.2344),2),\n\t\t{ER Rate} = round(({ER Rate}*1.2344),2)) ~> increaseratesby23\nbranchusingcutbackind@isnotcutbackind derive({Basic Rate} = round(({Basic Rate}*1.4344),2),\n\t\t{Child Rate} = round(({Child Rate}*1.4344),2),\n\t\t{ER Rate} = round(({ER Rate}*1.4344),2)) ~> increaseratesby43\nincreaseratesby43, increaseratesby23 union(byName: true)~> mergeratesdata\nmergeratesdata aggregate(groupBy({Proc Code}),\n\t{Proc Code Count} = count({Proc Code})) ~> aggregatebyproccode\naggregatebyproccode, mergeratesdata join(aggregatebyproccode@{Proc Code} == mergeratesdata@{Proc Code},\n\tjoinType:'inner',\n\tbroadcast: 'none')~> joinratesdata\ndiscardredundantcolumns split({Proc Code Count} == 1 || ( {Proc Code Count} == 2 && {Proc Type} != '1' ),\n\tdisjoint: true) ~> ConditionalSplit1@(removeduplicates)\njoinratesdata select(mapColumn(\n\t\t{Proc Code Count},\n\t\t{Proc Type},\n\t\t{Proc Code} = mergeratesdata@{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> discardredundantcolumns\nConditionalSplit1@removeduplicates select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> removecount\nremovecount filter(({Cutback Ind} == 0 || {Cutback Ind}== 1) && !isNull({ER Rate})) ~> emergencyroomservices\nemergencyroomservices derive({Service Description} = 'Emergency Room Services',\n\t\tAmount = \"$\"+toString({ER Rate}),\n\t\tModifier = '') ~> updateerservicedescription\nremovecount filter((({Cutback Ind} == 0 || {Cutback Ind}== 1) && isNull({ER Rate}) ) && {Proc Code}!='Z7610') ~> feescheduleservices\nfeescheduleservices derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = \"$\"+toString({Basic Rate}),\n\t\tModifier = '') ~> updatefsservicedescription\nremovecount filter({Proc Code}=='Z7610') ~> drugservices\ndrugservices derive({Service Description} = 'Drugs Service',\n\t\tAmount = \"\",\n\t\tModifier = '') ~> updatedrugservicedescription\nupdateerservicedescription, updatefsservicedescription, updatedrugservicedescription union(byName: true)~> mergecomputedrates\nmodifieruaubinput derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = \"$\" + toString(round(toFloat(replace(Amount, \"$\", \"\")) * 1.4344, 2))) ~> updatemodifiervalues\nmergemodifiedtcamount select(mapColumn(\n\t\t{Proc Code},\n\t\t{Service Description},\n\t\tAmount,\n\t\tModifier\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ChooseCols\nSelect1, updatemodifiervalues union(byName: true)~> mergeratesandmodifiers\nmergeratesandmodifiers derive({Code Type} = iif(rlike({Proc Code}, `[A-Za-z]`), 'HCPC', 'CPT4'),\n\t\t{Amount 2} = '',\n\t\t{Max Unit} = '',\n\t\t{Modifier 2} = '',\n\t\t{Amount 1} = Amount) ~> addCodeType\naddCodeType select(mapColumn(\n\t\t{Service Description},\n\t\t{Code Type},\n\t\tCode = {Proc Code},\n\t\t{Amount 1},\n\t\t{Amount 2},\n\t\t{Max Unit},\n\t\t{Modifier 1} = Modifier,\n\t\t{Modifier 2},\n\t\tallcount,\n\t\tallvalue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> picdataformat\npicdataformat sort(asc({Service Description}, true),\n\tasc(Code, true),\n\tasc({Modifier 1}, true)) ~> Sort1\nmergecomputedrates filter({Prof %}!=0.00 && {Prof %}!=1.00) ~> filterbyprocpercentage\nfilterbyprocpercentage derive(Amount = \"$\" + toString(round((1-{Prof %}) *toFloat(replace(Amount, \"$\", \"\")), 2)),\n\t\t{Service Description} = 'Fee Schedule Service',\n\t\tModifier = 'TC') ~> fsservicedesccomputemodtcamount\nmergecomputedrates, fsservicedesccomputemodtcamount union(byName: true)~> mergemodifiedtcamount\nChooseCols derive(allcols = {Proc Code}+{Service Description}+Amount+Modifier) ~> addallcolsvalues\naddallcolsvalues aggregate(groupBy(allcols),\n\tallcolscount = last(allcols)) ~> allcolscount\naddallcolsvalues, allcolscount join(addallcolsvalues@allcols == allcolscount@allcols,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> removeduprows\nremoveduprows select(mapColumn(\n\t\t{Proc Code},\n\t\t{Service Description},\n\t\tAmount,\n\t\tModifier,\n\t\tallvalue = allcolscount@allcols,\n\t\tallcount = allcolscount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['rates_output.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ratesoutput1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rates_input')]",
				"[concat(variables('factoryId'), '/datasets/modifiers')]",
				"[concat(variables('factoryId'), '/datasets/rates_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/medicaid_transform_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "rates_input",
								"type": "DatasetReference"
							},
							"name": "ratesinput"
						},
						{
							"dataset": {
								"referenceName": "modifiers",
								"type": "DatasetReference"
							},
							"name": "modifieruaubinput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rates_output",
								"type": "DatasetReference"
							},
							"name": "ratesoutput1"
						}
					],
					"transformations": [
						{
							"name": "branchusingproctype"
						},
						{
							"name": "branchusingcutbackind"
						},
						{
							"name": "interesteddcolumns"
						},
						{
							"name": "increaseratesby23"
						},
						{
							"name": "increaseratesby43"
						},
						{
							"name": "mergeratesdata"
						},
						{
							"name": "aggregatebyproccode"
						},
						{
							"name": "joinratesdata"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "discardredundantcolumns"
						},
						{
							"name": "removecount"
						},
						{
							"name": "emergencyroomservices"
						},
						{
							"name": "updateerservicedescription"
						},
						{
							"name": "feescheduleservices"
						},
						{
							"name": "updatefsservicedescription"
						},
						{
							"name": "drugservices"
						},
						{
							"name": "updatedrugservicedescription"
						},
						{
							"name": "mergecomputedrates"
						},
						{
							"name": "updatemodifiervalues"
						},
						{
							"name": "ChooseCols"
						},
						{
							"name": "mergeratesandmodifiers"
						},
						{
							"name": "addCodeType"
						},
						{
							"name": "picdataformat"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "filterbyprocpercentage"
						},
						{
							"name": "fsservicedesccomputemodtcamount"
						},
						{
							"name": "mergemodifiedtcamount"
						}
					],
					"script": "source(output(\n\t\t{Proc Type} as string,\n\t\t{Proc Code} as string,\n\t\t{Procedure Description} as string,\n\t\t{Unit Value} as double '$#########.###',\n\t\t{Basic Rate} as double '$#########.###',\n\t\t{Child Rate} as double '$#########.###',\n\t\t{ER Rate} as double '$#########.###',\n\t\t{Conv Ind} as short '000',\n\t\t{ER Ind} as integer '000',\n\t\t{Cutback Ind} as integer '000',\n\t\t{Prof %} as double '000,000,000.000',\n\t\t{Rental Rate} as double '000,000,000.000',\n\t\t{Non-Physn Med Prac Ind} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ratesinput\nsource(output(\n\t\tCode as string,\n\t\tModifier as string,\n\t\tAmount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> modifieruaubinput\ninteresteddcolumns split(rlike({Proc Type}, '[1IKLMN]'),\n\tdisjoint: true) ~> branchusingproctype@(filterbyproctype)\nbranchusingproctype@filterbyproctype split({Cutback Ind}==1,\n\t{Cutback Ind}==0,\n\tdisjoint: true) ~> branchusingcutbackind@(iscutbackind, isnotcutbackind)\nratesinput select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> interesteddcolumns\nbranchusingcutbackind@iscutbackind derive({Basic Rate} = round(({Basic Rate}*1.2344),2),\n\t\t{Child Rate} = round(({Child Rate}*1.2344),2),\n\t\t{ER Rate} = round(({ER Rate}*1.2344),2)) ~> increaseratesby23\nbranchusingcutbackind@isnotcutbackind derive({Basic Rate} = round(({Basic Rate}*1.4344),2),\n\t\t{Child Rate} = round(({Child Rate}*1.4344),2),\n\t\t{ER Rate} = round(({ER Rate}*1.4344),2)) ~> increaseratesby43\nincreaseratesby43, increaseratesby23 union(byName: true)~> mergeratesdata\nmergeratesdata aggregate(groupBy({Proc Code}),\n\t{Proc Code Count} = count({Proc Code})) ~> aggregatebyproccode\naggregatebyproccode, mergeratesdata join(aggregatebyproccode@{Proc Code} == mergeratesdata@{Proc Code},\n\tjoinType:'inner',\n\tbroadcast: 'none')~> joinratesdata\ndiscardredundantcolumns split({Proc Code Count} == 1 || ( {Proc Code Count} == 2 && {Proc Type} != '1' ),\n\tdisjoint: true) ~> ConditionalSplit1@(removeduplicates)\njoinratesdata select(mapColumn(\n\t\t{Proc Code Count},\n\t\t{Proc Type},\n\t\t{Proc Code} = mergeratesdata@{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> discardredundantcolumns\nConditionalSplit1@removeduplicates select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> removecount\nremovecount filter(({Cutback Ind} == 0 || {Cutback Ind}== 1) && !isNull({ER Rate})) ~> emergencyroomservices\nemergencyroomservices derive({Service Description} = 'Emergency Room Services',\n\t\tAmount = \"$\"+toString({ER Rate}),\n\t\tModifier = '') ~> updateerservicedescription\nremovecount filter((({Cutback Ind} == 0 || {Cutback Ind}== 1) && isNull({ER Rate}) ) && {Proc Code}!='Z7610') ~> feescheduleservices\nfeescheduleservices derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = \"$\"+toString({Basic Rate}),\n\t\tModifier = '') ~> updatefsservicedescription\nremovecount filter({Proc Code}=='Z7610') ~> drugservices\ndrugservices derive({Service Description} = 'Drugs Service',\n\t\tAmount = \"\",\n\t\tModifier = '') ~> updatedrugservicedescription\nupdateerservicedescription, updatefsservicedescription, updatedrugservicedescription union(byName: true)~> mergecomputedrates\nmodifieruaubinput derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = \"$\" + toString(round(toFloat(replace(Amount, \"$\", \"\")) * 1.4344, 2))) ~> updatemodifiervalues\nmergemodifiedtcamount select(mapColumn(\n\t\t{Proc Code},\n\t\t{Service Description},\n\t\tAmount,\n\t\tModifier\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ChooseCols\nChooseCols, updatemodifiervalues union(byName: true)~> mergeratesandmodifiers\nmergeratesandmodifiers derive({Code Type} = iif(rlike({Proc Code}, `[A-Za-z]`), 'HCPC', 'CPT4'),\n\t\t{Amount 2} = '',\n\t\t{Max Unit} = '',\n\t\t{Modifier 2} = '',\n\t\t{Amount 1} = Amount) ~> addCodeType\naddCodeType select(mapColumn(\n\t\t{Service Description},\n\t\t{Code Type},\n\t\tCode = {Proc Code},\n\t\t{Amount 1},\n\t\t{Amount 2},\n\t\t{Max Unit},\n\t\t{Modifier 1} = Modifier,\n\t\t{Modifier 2}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> picdataformat\npicdataformat sort(asc({Service Description}, true),\n\tasc(Code, true),\n\tasc({Modifier 1}, true)) ~> Sort1\nmergecomputedrates filter({Prof %}!=0.00 && {Prof %}!=1.00) ~> filterbyprocpercentage\nfilterbyprocpercentage derive(Amount = \"$\" + toString(round((1-{Prof %}) *toFloat(replace(Amount, \"$\", \"\")), 2)),\n\t\t{Service Description} = 'Fee Schedule Service',\n\t\tModifier = 'TC') ~> fsservicedesccomputemodtcamount\nmergecomputedrates, fsservicedesccomputemodtcamount union(byName: true)~> mergemodifiedtcamount\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['rates_output.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ratesoutput1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rates_input')]",
				"[concat(variables('factoryId'), '/datasets/modifiers')]",
				"[concat(variables('factoryId'), '/datasets/rates_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mwfpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "medicaid_transform_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "mwfcustomtransforms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "medicaid_transform_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ratesinput": {},
									"modifieruaubinput": {},
									"ratesoutput1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "mwfcustomtransforms",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/sbabu41@entid.optumhub.net/mwfintermediatetransform"
						},
						"linkedServiceName": {
							"referenceName": "mwfdatabricksconnectivity",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/medicaid_transform_dataflow')]",
				"[concat(variables('factoryId'), '/linkedServices/mwfdatabricksconnectivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mwfpipelineTESTDataBricks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "medicaid_transform_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "mwfcustomtransforms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "medicaid_transform_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ratesinput": {},
									"modifieruaubinput": {},
									"ratesoutput1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "mwfcustomtransforms",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/sbabu41@entid.optumhub.net/mwfintermediatetransform"
						},
						"linkedServiceName": {
							"referenceName": "mwfdatabricksconnectivity",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/medicaid_transform_dataflow')]",
				"[concat(variables('factoryId'), '/linkedServices/mwfdatabricksconnectivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlydf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dup",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ratesinput": {},
									"modifieruaubinput": {},
									"ratesoutput1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlydforiginal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "medicaid_transform_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "medicaid_transform_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ratesinput": {},
									"modifieruaubinput": {},
									"ratesoutput1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/medicaid_transform_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger Every 15 mins')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "mwfpipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2020-04-03T11:27:00.000Z",
						"endTime": "2020-04-10T11:27:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/mwfpipeline')]"
			]
		}
	]
}