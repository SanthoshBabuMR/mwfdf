{
	"name": "medicaid_transform_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "rates_input",
						"type": "DatasetReference"
					},
					"name": "ratesinput"
				},
				{
					"dataset": {
						"referenceName": "modifiers",
						"type": "DatasetReference"
					},
					"name": "modifieruaubinput"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "rates_output",
						"type": "DatasetReference"
					},
					"name": "ratesoutput"
				}
			],
			"transformations": [
				{
					"name": "branchusingproctype"
				},
				{
					"name": "branchusingcutbackind"
				},
				{
					"name": "interesteddcolumns"
				},
				{
					"name": "increaseratesby23"
				},
				{
					"name": "increaseratesby43"
				},
				{
					"name": "mergeratesdata"
				},
				{
					"name": "aggregatebyproccode"
				},
				{
					"name": "joinratesdata"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "discardredundantcolumns"
				},
				{
					"name": "removecount"
				},
				{
					"name": "emergencyroomservices"
				},
				{
					"name": "updateerservicedescription"
				},
				{
					"name": "feescheduleservices"
				},
				{
					"name": "updatefsservicedescription"
				},
				{
					"name": "drugservices"
				},
				{
					"name": "updatedrugservicedescription"
				},
				{
					"name": "mergecomputedrates"
				},
				{
					"name": "updatemodifiervalues"
				},
				{
					"name": "ChooseCols"
				},
				{
					"name": "mergeratesandmodifiers"
				},
				{
					"name": "addCodeType"
				},
				{
					"name": "picdataformat"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "filterbyprocpercentage"
				},
				{
					"name": "fsservicedesccomputemodtcamount"
				},
				{
					"name": "mergemodifiedtcamount"
				}
			],
			"script": "source(output(\n\t\t{Proc Type} as string,\n\t\t{Proc Code} as string,\n\t\t{Procedure Description} as string,\n\t\t{Unit Value} as double '$#########.###',\n\t\t{Basic Rate} as double '$#########.###',\n\t\t{Child Rate} as double '$#########.###',\n\t\t{ER Rate} as double '$#########.###',\n\t\t{Conv Ind} as short '000',\n\t\t{ER Ind} as integer '000',\n\t\t{Cutback Ind} as integer '000',\n\t\t{Prof %} as double '000,000,000.000',\n\t\t{Rental Rate} as double '000,000,000.000',\n\t\t{Non-Physn Med Prac Ind} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ratesinput\nsource(output(\n\t\tCode as string,\n\t\tModifier as string,\n\t\tAmount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> modifieruaubinput\ninteresteddcolumns split(rlike({Proc Type}, '[1IKLMN]'),\n\tdisjoint: true) ~> branchusingproctype@(filterbyproctype)\nbranchusingproctype@filterbyproctype split({Cutback Ind}==1,\n\t{Cutback Ind}==0,\n\tdisjoint: true) ~> branchusingcutbackind@(iscutbackind, isnotcutbackind)\nratesinput select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> interesteddcolumns\nbranchusingcutbackind@iscutbackind derive({Basic Rate} = {Basic Rate}+round(({Basic Rate}*23.44)/100,2),\n\t\t{Child Rate} = {Child Rate}+round(({Child Rate}*23.44)/100,2),\n\t\t{ER Rate} = {ER Rate}+round(({ER Rate}*23.44)/100,2)) ~> increaseratesby23\nbranchusingcutbackind@isnotcutbackind derive({Basic Rate} = {Basic Rate}+round(({Basic Rate}*43.44)/100,2),\n\t\t{Child Rate} = {Child Rate}+round(({Child Rate}*43.44)/100,2),\n\t\t{ER Rate} = {ER Rate}+round(({ER Rate}*43.44)/100,2)) ~> increaseratesby43\nincreaseratesby43, increaseratesby23 union(byName: true)~> mergeratesdata\nmergeratesdata aggregate(groupBy({Proc Code}),\n\t{Proc Code Count} = count({Proc Code})) ~> aggregatebyproccode\naggregatebyproccode, mergeratesdata join(aggregatebyproccode@{Proc Code} == mergeratesdata@{Proc Code},\n\tjoinType:'inner',\n\tbroadcast: 'none')~> joinratesdata\ndiscardredundantcolumns split({Proc Code Count} == 1 || ( {Proc Code Count} == 2 && {Proc Type} != '1' ),\n\tdisjoint: true) ~> ConditionalSplit1@(removeduplicates)\njoinratesdata select(mapColumn(\n\t\t{Proc Code Count},\n\t\t{Proc Type},\n\t\t{Proc Code} = mergeratesdata@{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> discardredundantcolumns\nConditionalSplit1@removeduplicates select(mapColumn(\n\t\t{Proc Type},\n\t\t{Proc Code},\n\t\t{Basic Rate},\n\t\t{Child Rate},\n\t\t{ER Rate},\n\t\t{Cutback Ind},\n\t\t{Prof %}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> removecount\nremovecount filter(({Cutback Ind} == 0 || {Cutback Ind}== 1) && !isNull({ER Rate})) ~> emergencyroomservices\nemergencyroomservices derive({Service Description} = 'Emergency Room Services',\n\t\tAmount = {ER Rate},\n\t\tModifier = '') ~> updateerservicedescription\nremovecount filter(({Cutback Ind} == 0 || {Cutback Ind}== 1) && isNull({ER Rate})) ~> feescheduleservices\nfeescheduleservices derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = {Basic Rate},\n\t\tModifier = '') ~> updatefsservicedescription\nremovecount filter({Proc Code}=='Z7610') ~> drugservices\ndrugservices derive({Service Description} = 'Drugs Service',\n\t\tAmount = toDouble(-1),\n\t\tModifier = '') ~> updatedrugservicedescription\nupdateerservicedescription, updatefsservicedescription, updatedrugservicedescription union(byName: true)~> mergecomputedrates\nmodifieruaubinput derive({Service Description} = 'Fee Schedule Service',\n\t\tAmount = \"$\" + toString(round((regexReplace(Amount, \"$\", \"\")*43.44)/100,2))) ~> updatemodifiervalues\nmergemodifiedtcamount select(mapColumn(\n\t\t{Proc Code},\n\t\t{Service Description},\n\t\tAmount,\n\t\tModifier\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ChooseCols\nChooseCols, updatemodifiervalues union(byName: true)~> mergeratesandmodifiers\nmergeratesandmodifiers derive({Code Type} = iif(rlike({Proc Code}, `[A-Za-z]`), 'HCPC', 'CPT4'),\n\t\t{Amount 2} = '',\n\t\t{Max Unit} = '',\n\t\t{Modifier 2} = '',\n\t\t{Amount 1} = iif(Amount == -1, '', toString(Amount))) ~> addCodeType\naddCodeType select(mapColumn(\n\t\t{Service Description},\n\t\t{Code Type},\n\t\tCode = {Proc Code},\n\t\t{Amount 1},\n\t\t{Amount 2},\n\t\t{Max Unit},\n\t\t{Modifier 1} = Modifier,\n\t\t{Modifier 2}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> picdataformat\npicdataformat sort(asc({Service Description}, true),\n\tasc(Code, true),\n\tasc({Modifier 1}, true)) ~> Sort1\nmergecomputedrates filter({Prof %}!=0.00 && {Prof %}!=1.00) ~> filterbyprocpercentage\nfilterbyprocpercentage derive(Amount = round(( (1-{Prof %})* Amount),2),\n\t\t{Service Description} = 'Fee Schedule Service',\n\t\tModifier = 'TC') ~> fsservicedesccomputemodtcamount\nmergecomputedrates, fsservicedesccomputemodtcamount union(byName: true)~> mergemodifiedtcamount\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['rates_output.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ratesoutput"
		}
	}
}